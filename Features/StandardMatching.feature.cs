// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowBdd.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Standard matching", new string[] {
            "standardMatching"}, Description="\tStandard matching requires that both manufacturer and model match.", SourceFile="Features\\StandardMatching.feature", SourceLine=1)]
    public partial class StandardMatchingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "standardMatching"};
        
#line 1 "StandardMatching.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Standard matching", "\tStandard matching requires that both manufacturer and model match.", ProgrammingLanguage.CSharp, new string[] {
                        "standardMatching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ManufacturerMatchModelMatch(string productManufacturer, string productModel, string entryManufacturer, string entryModel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("productManufacturer", productManufacturer);
            argumentsOfScenario.Add("productModel", productModel);
            argumentsOfScenario.Add("entryManufacturer", entryManufacturer);
            argumentsOfScenario.Add("entryModel", entryModel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manufacturer match, model match", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("a product is added with manufacturer {0} and model {1}", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And(string.Format("an entry is added with manufacturer {0} and model {1}", entryManufacturer, entryModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.When("standard matching is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("the product with manufacturer {0} and model {1}  is a standard match", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer match, model match, Variant 0", SourceLine=12)]
        public virtual void ManufacturerMatchModelMatch_Variant0()
        {
#line 5
this.ManufacturerMatchModelMatch("Porsche", "Cayenne", "Porsche", "Cayenne", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer match, model match, Variant 1", SourceLine=12)]
        public virtual void ManufacturerMatchModelMatch_Variant1()
        {
#line 5
this.ManufacturerMatchModelMatch("Porsche", "Boxster", "PorscheEdit", "Boxster", ((string[])(null)));
#line hidden
        }
        
        public virtual void ManufacturerNoMatchModelNoMatch(string productManufacturer, string productModel, string entryManufacturer, string entryModel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("productManufacturer", productManufacturer);
            argumentsOfScenario.Add("productModel", productModel);
            argumentsOfScenario.Add("entryManufacturer", entryManufacturer);
            argumentsOfScenario.Add("entryModel", entryModel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manufacturer no match, model no match", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given(string.Format("a product is added with manufacturer {0} and model {1}", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.And(string.Format("an entry is added with manufacturer {0} and model {1}", entryManufacturer, entryModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.When("standard matching is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then(string.Format("the product with manufacturer {0} and model {1}  is not a match", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer no match, model no match, Variant 0", SourceLine=23)]
        public virtual void ManufacturerNoMatchModelNoMatch_Variant0()
        {
#line 16
this.ManufacturerNoMatchModelNoMatch("Porsche", "911", "Toyota", "Corolla", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer no match, model no match, Variant 1", SourceLine=23)]
        public virtual void ManufacturerNoMatchModelNoMatch_Variant1()
        {
#line 16
this.ManufacturerNoMatchModelNoMatch("Porsche", "Cayman", "Toyota", "Camry", ((string[])(null)));
#line hidden
        }
        
        public virtual void ManufacturerMatchModelNoMatch(string productManufacturer, string productModel, string entryManufacturer, string entryModel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("productManufacturer", productManufacturer);
            argumentsOfScenario.Add("productModel", productModel);
            argumentsOfScenario.Add("entryManufacturer", entryManufacturer);
            argumentsOfScenario.Add("entryModel", entryModel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manufacturer match, model no match", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("a product is added with manufacturer {0} and model {1}", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.And(string.Format("an entry is added with manufacturer {0} and model {1}", entryManufacturer, entryModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.When("standard matching is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then(string.Format("the product with manufacturer {0} and model {1}  is not a match", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer match, model no match, Porsche", SourceLine=34)]
        public virtual void ManufacturerMatchModelNoMatch_Porsche()
        {
#line 27
this.ManufacturerMatchModelNoMatch("Porsche", "Taycan", "Porsche", "Panamera", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer match, model no match, Toyota", SourceLine=34)]
        public virtual void ManufacturerMatchModelNoMatch_Toyota()
        {
#line 27
this.ManufacturerMatchModelNoMatch("Toyota", "Land Cruiser", "Toyota", "Supra", ((string[])(null)));
#line hidden
        }
        
        public virtual void ManufacturerNoMatchModelMatch(string productManufacturer, string productModel, string entryManufacturer, string entryModel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("productManufacturer", productManufacturer);
            argumentsOfScenario.Add("productModel", productModel);
            argumentsOfScenario.Add("entryManufacturer", entryManufacturer);
            argumentsOfScenario.Add("entryModel", entryModel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manufacturer no match, model match", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given(string.Format("a product is added with manufacturer {0} and model {1}", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.And(string.Format("an entry is added with manufacturer {0} and model {1}", entryManufacturer, entryModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.When("standard matching is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("the product with manufacturer {0} and model {1} is not a match", productManufacturer, productModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer no match, model match, BMW", SourceLine=45)]
        public virtual void ManufacturerNoMatchModelMatch_BMW()
        {
#line 38
this.ManufacturerNoMatchModelMatch("BMW", "Sports Car", "Tesla", "Sports Car", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Manufacturer no match, model match, Honda", SourceLine=45)]
        public virtual void ManufacturerNoMatchModelMatch_Honda()
        {
#line 38
this.ManufacturerNoMatchModelMatch("Honda", "SUV", "General Motors", "SUV", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
